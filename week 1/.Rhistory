glm.pred=ifelse(glm.probs >0.5,"Up","Down")
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(76+106)
require(MASS)
summary(glm.probs)
summary(glm.fit)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
lda.fit
plot(lda.fit)
?lda
Smarket.2005=subset(Smarket,Year==2005)
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred[1:5,]
lda.pred[1:5]
plot(lda.fit)
plot(lda.fit)
lda.pred[1:5,]
class(lda.pred)
data.frame(lda.pred)[1:5,]
table(lda.pred$class,Smarket.2005$Direction)
mean(lda.pred$class==Smarket.2005$Direction)
library(class)
?knn
attach(Smarket)
Xlag=cbind(Lag1,Lag2)
train=Year<2005
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=1)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
Xlag[1:5,]
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=2)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=3)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=4)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
load("C:/Users/j/Downloads/depression.RData")
View(depression)
attach(depression)
depression$Gender<-replace(Gender, Gender == 1, 'Female')
depression$Gender<-replace(Gender, Gender == 2, 'Male')
load("C:/Users/j/Downloads/friends.RData")
t<-table(friends); t
percent<-100*t/sum(t); percent
pie(t)
pf<-format(percent, digits = 3)
lbl = paste(c("No dif", "Opp sex", "Same sex"), pf,"%",sep="");
pie(t,label=lbl)
load("C:/Users/j/Downloads/actor.RData")
attach(actor_age)
hist(actor_age$Age,breaks=8)
hist(actor_age$Age,breaks=20)
hist(actor_age$Age,breaks=8)
View(actor_age)
summary(age)
summary(Age)
(1+6+7+10+8+11+12+15)/9
(3+5*2+15*3+25*4+20*5+15*6+5*7+8+9)/90
63/2
17/63
120+1.5*(120-95)
summary(Age)
76-3
76-31
48.75-37.75
load("C:/Users/j/Downloads/graduation.RData")
attach(grad_data)
boxplot(grad_data)
names(grad_data)
require(ISLR)
attach(Wage)
fit=lm(wage~poly(age,4),data=Wage)
summary(fit)
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se,preds$fit-2*preds$se)
plot(age,wage,col="darkgrey")
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,col="blue",lty=2)
fita=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
summary(fita)
plot(fitted(fit),fitted(fita))
summary(fit)
fita=lm(wage~education,data=Wage)
fitb=lm(wage~education+age,data=Wage)
fitc=lm(wage~education+poly(age,2),data=Wage)
fitd=lm(wage~education+poly(age,3),data=Wage)
anova(fita,fitb,fitc,fitd)
fit=glm(I(wage>250) ~ poly(age,3), data=Wage, family=binomial)
summary(fit)
preds=predict(fit,list(age=age.grid),se=T)
se.bands=preds$fit + cbind(fit=0,lower=-2*preds$se,upper=2*preds$se)
se.bands[1:5,]
prob.bands=exp(se.bands)/(1+exp(se.bands))
matplot(age.grid,prob.bands,col="blue",lwd=c(2,1,1),lty=c(1,2,2),type="l",ylim=c(0,.1))
points(jitter(age),I(wage>250)/10,pch="|",cex=.5)
require(splines)
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage)
plot(age,wage,col="darkgrey")
lines(age.grid,predict(fit,list(age=age.grid)),col="darkgreen",lwd=2)
abline(v=c(25,40,60),lty=2,col="darkgreen")
fit=smooth.spline(age,wage,df=16)
lines(fit,col="red",lwd=2)
fit=smooth.spline(age,wage,cv=TRUE)
lines(fit,col="purple",lwd=2)
fit
require(gam)
install.packages("gam")
require(gam)
gam1=gam(wage~s(age,df=4)+s(year,df=4)+education,data=Wage)
par(mfrow=c(1,3))
plot(gam1,se=T)
gam2=gam(I(wage>250)~s(age,df=4)+s(year,df=4)+education,data=Wage,family=binomial)
plot(gam2)
gam2a=gam(I(wage>250)~s(age,df=4)+year+education,data=Wage,family=binomial)
anova(gam2a,gam2,test="Chisq")
par(mfrow=c(1,3))
lm1=lm(wage~ns(age,df=4)+ns(year,df=4)+education,data=Wage)
plot.gam(lm1,se=T)
load("C:/Users/j/Downloads/7.R.RData")
plot(y, x)
par(mfrow=1)
plot(y, x)
lm(y ~ x)
m <- lm(y ~ x)
summary(m)
m2 <- lm(y ~ poly(x, 2))
summary(m2)
m2 <- lm(y ~ x + I(x^2))
summary(m2)
plot(y, x)
1998 - 18
1290/20
4*(0.9+0.8*0.5+0.75*0.5)
12*0.5+12*0.25
0.9*4*(0.25+0.2)
0.5*12*(0.25)
6*0.65*(0.5*0.75+0.75*0.25)
6*0.65*(0.5*0.75*2+2*0.75*0.25)
0.75*3*(0.5*0.65*2+2*0.7*0.35)
0.7*6*(2*0.3*0.9+2*0.85*0.1)
0.9*3*(2*0.7*0.7 + 2*0.3*0.8)
41315/11000000
150/750
(5-4)^2 + (3-4)^2 + 1 + 1
-2 + 0.5*6
4*16
64+32
64+32+4*32
2*8+2*32
(7921+5184+3336+4761)/4
4761-5300.5
7921-3336
-539.5/4585
(89+72+94+69)/4
8/(94-69)
(7921+5184+8836+4761)/4
(4761-6675.5)/(8836-4761)
(7921+5184+8836+4761)/4
(5184-6675.5)/(8836-4761)
load(url("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/ESL.mixture.rda"))
attach(ESL.mixture)
plot(x,col=y+1)
dat=data.frame(y=factor(y),x)
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial",cost=5)
library(e1071)
dat=data.frame(y=factor(y),x)
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial",cost=5)
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
func=predict(fit,xgrid,decision.values=TRUE)
func=attributes(func)$decision
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
contour(px1,px2,matrix(func,69,99),level=0,add=TRUE)
contour(px1,px2,matrix(prob,69,99),level=.5,add=TRUE,col="blue",lwd=2) #thispredicts the function itself from the data
6*4*365
((1.01)^3 + 0.99^3)/0.02
((1.01)^3 + 0.99^3))/0.02
((1.01)^3 + (0.99)^3))/0.02
((1.01)^3 + (0.99)^3)/0.02
1.01^3
1.01^3 +0.99^3
2.006/0.02
((1.01)^3 - (0.99)^3)/0.02
(2*1.01^3 + 2 - 2*0.99^3 - 2)/0.02
84/(85+15)
85/(85+15)
85/(85+890)
p <- 85/(85+890)
r <- 85/(85+15)
(2*p*4)/(p + r)
p <- 85/(85+890)
(2*p*r)/(p+r)
install.packages('RH2')
install.packages('sqldf')
install.packages("Rtools")
install.packages("shiny")
library(devtools)
install.packages("devtools")
Sys.getenv("PATH")
Sys.getenv("PATH")
system()
system('g++ -v')
Sys.getenv('PATH')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
z <- makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y <- cachemean()
a <- 1:100000
a <- rnorm(10000000)
z <- cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the matrix. If the inverse has already
## been calculated, then it retrieves it from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
d <- x$get()
m <- solve(d, ...)
x$setinverse(m)
m
}
z <- makeCacheMatrix()
c <- c(8, 3, 0, 10, 4, 6, -2, 8, 9)
c <- matrix(c, 3)
z$get(c)
z$set(c)
z$get()
cacheSolve(z)
z$get()*cacheSolve(z)
10000^-1
z$set(matrix(rnorm(10000), 10000))
25000*.015 + 20
install.packages(c("arm", "bdsmatrix", "BH", "caTools", "data.table", "DataCombine", "DBI", "devtools", "e1071", "foreign", "formatR", "Formula", "gdata", "ggplot2", "glmnet", "gplots", "gsubfn", "gtools", "highr", "htmltools", "httpuv", "httr", "knitr", "labeling", "Lahman", "lme4", "magrittr", "maptools", "markdown", "Matrix", "memoise", "mgcv", "mime", "minqa", "mnlogit", "nlme", "nnet", "plotrix", "plyr", "randomForest", "Rcpp", "RcppEigen", "RCurl", "reshape", "reshape2", "RH2", "RJDBC", "RJSONIO", "rmarkdown", "RSQLite", "Rttf2pt1", "sandwich", "scales", "shiny", "sp", "statmod", "texreg", "xtable", "zoo"))
install.packages("installr")
library(installr)
updateR()
library(shiny)
check.for.updates.R()
library(RCurl)
install.packages("JSONIO")
install.packages("RJSONIO")
library(RJSONIO)
library(devtools)
devtools::install_github("ropengov/rtimes")
library(rtimes)
options(nytimes_cg_key = api)
api <- "76d0a93de9921d4ed32a4ffe84485574:2:35571231"
q <- "China"
options(nytimes_cg_key = api)
begin_date = "20150101"
end_date = "20150201"
out <- as_search(q = q, begin_date = begin_date, end_date = end_date)
out <- as_search(q = "China", begin_date = begin_date, end_date = end_date)
query <- "China"
i = 1
key <- "76d0a93de9921d4ed32a4ffe84485574:2:35571231"
query <- "China"
records <- 500
pageRange <- 0: (records/10 - 1)
#test run
begin_date = "20150101"
end_date = "20150201"
data <- c()
uri <- paste0("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=", query,
"&facet_field=source&begin_date=", begin_date, "&end_date=", end_date,
"&facet_filter=true", "&page=", i, "&api-key=", key)
d <- getURL(uri)
d
res <- fromJSON(d, simplify = FALSE)
data <- append(data, unlist(res$response$docs))
View(data)
begin_date = "20000101"
end_date = "20000201"
uri <- paste0("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=", query,
"&facet_field=source&begin_date=", begin_date, "&end_date=", end_date,
"&facet_filter=true", "&page=", i, "&api-key=", key)
d <- getURL(uri)
res <- fromJSON(d, simplify = FALSE)
data <- append(data, unlist(res$response$docs))
data <- c()
uri <- paste0("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=", query,
"&facet_field=source&begin_date=", begin_date, "&end_date=", end_date,
"&facet_filter=true", "&page=", i, "&api-key=", key)
d <- getURL(uri)
res <- fromJSON(d, simplify = FALSE)
data <- append(data, unlist(res$response$docs))
View(data)
39/(39+33+123)
33/(39+33+123)
123/(39+33+123)
library(dplyr)
library(reshape2)
library(ggplot2)
d <- read.csv(file = "congress/output/china_segments.csv", stringsAsFactors = F)
setwd("C:/Dropbox/Projects/d3/week 1")
library(dplyr)
library(readr)
exports_all <- read_csv("exports_total.csv")
library(reshape2)
head(exports_all)
View(exports_all)
exports_all[1,2]/100000
9010818*100000== exports_all[1,2]
exports_all[1,3]/100000
exports_all[1,3]
options(scipen=999)
exports_all[1,3]
View(exports_all)
exports_all <- exports_all[c(2:10, 12:53)]
exports_all <- exports_all[c(2:10, 12:53),]
View(exports_all)
exports_all <- read_csv("exports_total.csv")
View(exports_all)
exports_all <- exports_all[c(2:10, 12:53),]
View(exports_all)
exports_all <- read_csv("exports_total.csv")
exports_all <- exports_all[c(2:10, 12:23, 25:53),]
View(exports_all)
names(exports_all)
exports_all <- melt(exports_all, id.vars = c("State"))
head(exports_all)
colnames(exports_all) <- c("state", "year", "exports_total")
exports_all <- exports_all %>% arrange(state, year)
table(exports_all$year)
imports_all <- read_csv("imports_total.csv")
names(imports_all)
exports_all <- exports_all %>% filter(year >= 2008) %>% arrange(state, year)
exports_all$year <- as.numeric(exports_all$year)
exports_all <- exports_all %>% filter(year >= 2008) %>% arrange(state, year)
exports_all <- read_csv("exports_total.csv")
exports_all <- exports_all[c(2:10, 12:23, 25:53),]
exports_all <- melt(exports_all, id.vars = c("State"))
colnames(exports_all) <- c("state", "year", "exports_total")
exports_all$year <- as.numeric(exports_all$year)
exports_all <- exports_all %>% filter(year >= 2008) %>% arrange(state, year)
exports_all <- read_csv("exports_total.csv")
exports_all <- exports_all[c(2:10, 12:23, 25:53),]
exports_all <- melt(exports_all, id.vars = c("State"))
colnames(exports_all) <- c("state", "year", "exports_total")
exports_all$year <- as.numeric(exports_all$year)
class(exports_all$year)
table(exports_all$year)
exports_all <- read_csv("exports_total.csv")
exports_all <- exports_all[c(2:10, 12:23, 25:53),]
exports_all <- melt(exports_all, id.vars = c("State"))
colnames(exports_all) <- c("state", "year", "exports_total")
class(exports_all$year)
table(exports_all$year)
View(exports_all)
exports_all$year <- rep(c(2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
exports_all <- exports_all %>% filter(year >= 2008) %>% arrange(state, year)
View(imports_all)
imports_all <- imports_all[c(2:24, 26:32, 34:52, 54),]
imports_all <- melt(imports_all, id.vars = c("State"))
colnames(imports_all) <- c("state", "year", "exports_total")
table(imports_all$year)
head(exports_all)
imports_all$year <- rep(c(2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
imports_all <- imports_all %>% filter(year >= 2008) %>% arrange(state, year)
exports_china <- read_csv("exports_to_china.csv")
View(exports_china)
exports_china$State
exports_china <- exports_china[c(-1, -28, -33, -54, -55),]
exports_china <- melt(exports_china, id.vars = c("State"))
colnames(exports_china) <- c("state", "year", "exports_total")
colnames(exports_china) <- c("state", "year", "exports_china")
exports_china$year <- rep(c(2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
exports_china <- exports_china %>% filter(year >= 2008) %>% arrange(state, year)
imports_china <- read_csv("imports_from_china.csv")
imports_china$State
imports_china <- imports_china[c(-1, -31, -43, -54, -55),]
imports_all <- read_csv("imports_total.csv")
imports_all <- imports_all[c(2:24, 26:32, 34:52, 54),]
imports_all <- melt(imports_all, id.vars = c("State"))
colnames(imports_all) <- c("state", "year", "imports_total")
imports_all$year <- rep(c(2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
imports_all <- imports_all %>% filter(year >= 2008) %>% arrange(state, year)
imports_china <- read_csv("imports_from_china.csv")
imports_china <- imports_china[c(-1, -31, -43, -54, -55),]
imports_china <- melt(imports_china, id.vars = c("State"))
colnames(imports_china) <- c("state", "year", "imports_china")
imports_china$year <- rep(c(2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
imports_china <- imports_china %>% filter(year >= 2008) %>% arrange(state, year)
exports_all$state
trade_data <- cbind(exports_all, imports_all[,3], exports_china[,3], imports_china[,3])
econ <- read_csv("econ_stats.csv")
View(econ)
names(econ)
econ2 <- econ %>% filter(GeoName %in% unique(trade_data$state))
View(econ2)
length(unique(econ2$GeoName))
length(unique(econ$GeoName))
unique(econ$GeoName)
econ2 <- econ %>% filter(Description == "All industry total")
econ2$GeoName
econ <- read_csv("econ_stats.csv")
names(econ)
econ2$GeoName
econ2 <- econ %>% filter(Description == "All industry total")
econ2$GeoName
econ2 <- econ[,c(2:9, 11:52), c(2, 20:26)]
econ <- read_csv("econ_stats.csv")
econ2 <- econ %>% filter(Description == "All industry total")
econ2 <- econ2[,c(2:9, 11:52), c(2, 20:26)]
econ <- read_csv("econ_stats.csv")
econ2 <- econ %>% filter(Description == "All industry total")
econ2 <- econ2[c(2:9, 11:52), c(2, 20:26)]
econ2 <- melt(econ2, id.vars = c("GeoName"))
colnames(econ2) <- melt(imports_china, id.vars = c("GDP"))
colnames(econ2) <- c("state", "year", "GDP")
econ2$year <- rep(c(2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
econ2 <- econ2 %>% filter(year >= 2008) %>% arrange(state, year)
trade_data <- rbind(trade_data, econ2[,3])
write.csv(trade_data, file = "trade_with_china_by_state.csv")
names(trade_data)
trade_data <- rbind(trade_data, econ2[,3])
names(trade_data)
names(econ2)
exports_all <- read_csv("exports_total.csv")
exports_all <- exports_all[c(2:10, 12:23, 25:53),]
exports_all <- melt(exports_all, id.vars = c("State"))
colnames(exports_all) <- c("state", "year", "exports_total")
exports_all$year <- rep(c(2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
exports_all <- exports_all %>% filter(year >= 2008) %>% arrange(state, year)
imports_all <- read_csv("imports_total.csv")
imports_all <- imports_all[c(2:24, 26:32, 34:52, 54),]
imports_all <- melt(imports_all, id.vars = c("State"))
colnames(imports_all) <- c("state", "year", "imports_total")
imports_all$year <- rep(c(2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
imports_all <- imports_all %>% filter(year >= 2008) %>% arrange(state, year)
exports_china <- read_csv("exports_to_china.csv")
exports_china <- exports_china[c(-1, -28, -33, -54, -55),]
exports_china <- melt(exports_china, id.vars = c("State"))
colnames(exports_china) <- c("state", "year", "exports_china")
exports_china$year <- rep(c(2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
exports_china <- exports_china %>% filter(year >= 2008) %>% arrange(state, year)
imports_china <- read_csv("imports_from_china.csv")
imports_china <- imports_china[c(-1, -31, -43, -54, -55),]
imports_china <- melt(imports_china, id.vars = c("State"))
colnames(imports_china) <- c("state", "year", "imports_china")
imports_china$year <- rep(c(2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
imports_china <- imports_china %>% filter(year >= 2008) %>% arrange(state, year)
trade_data <- cbind(exports_all, imports_all[,3], exports_china[,3], imports_china[,3])
econ <- read_csv("econ_stats.csv")
econ2 <- econ %>% filter(Description == "All industry total")
econ2 <- econ2[c(2:9, 11:52), c(2, 20:26)]
econ2 <- melt(econ2, id.vars = c("GeoName"))
colnames(econ2) <- c("state", "year", "GDP")
econ2$year <- rep(c(2008, 2009, 2010, 2011, 2012, 2013, 2014), each = 50)
econ2 <- econ2 %>% filter(year >= 2008) %>% arrange(state, year)
trade_data <- cbind(trade_data, econ2[,3])
names(trade_data)
colnames(trade_data) <- c("state", "year", "exports_total", "imports_total", "exports_china", "imports_china", "GDP")
write.csv(trade_data, file = "trade_with_china_by_state.csv")
write.csv(trade_data, file = "trade_with_china_by_state.csv")
colnames(trade_data) <- c("state", "year", "exports_total", "imports_total", "exports_china", "imports_china", "GDP_millions")
